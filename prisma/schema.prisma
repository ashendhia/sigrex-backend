// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model BaseUser {
  id           String        @id @default(cuid())
  mail         String        @unique @db.VarChar(60)
  name         String        @db.VarChar(60)
  photo        String?
  password     String        @db.VarChar(60)
  phone        String        @db.VarChar(60)
  address      String        @db.VarChar(60)
  more         String?       @db.VarChar(1024)
  approved     Boolean       @default(false)
  organization Organization?
  user         User?
}

model User {
  id          String       @id @default(cuid())
  familyName  String       @db.VarChar(60)
  sexe        String       @db.VarChar(60)
  userId      String       @unique
  user        BaseUser     @relation(fields: [userId], references: [id])
  formateur   Formateur?
  participant Participant?
}

model Organization {
  id           Int           @id @default(autoincrement())
  userId       String        @unique
  user         BaseUser      @relation(fields: [userId], references: [id])
  participants Participant[]
}

model Formateur {
  id           Int         @id @default(autoincrement())
  diploma      Diploma?
  specialty    Specialty?
  employeur    String      @db.VarChar(124)
  fonction     String      @db.VarChar(124)
  cv           String
  numeroCompte String      @db.VarChar(60)
  status       String      @db.VarChar(24)
  salaire      Float       @db.Float
  formations   Formation[]
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id])
}

model Diploma {
  id          Int       @id @default(autoincrement())
  designation String    @db.VarChar(60)
  formateurId Int       @unique
  formateur   Formateur @relation(fields: [formateurId], references: [id])
}

model Specialty {
  id          Int       @id @default(autoincrement())
  designation String    @db.VarChar(60)
  formateurId Int       @unique
  formateur   Formateur @relation(fields: [formateurId], references: [id])
}

model Participant {
  id             Int          @id @default(autoincrement())
  formations     Formation[]
  niveau         Niveau?
  userId         String       @unique
  user           User         @relation(fields: [userId], references: [id])
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  // Add attributes specific to participants
}

model Theme {
  id          Int         @id @default(autoincrement())
  famille     String      @db.VarChar(60)
  designation String      @db.VarChar(60)
  description String      @db.VarChar(1024)
  public      Boolean?
  formations  Formation[]
}

// Relations that are related to the Theme model

model Formation {
  id                    Int                 @id @default(autoincrement())
  designation           String              @db.VarChar(60)
  description           String              @db.VarChar(1024)
  themeId               Int
  theme                 Theme               @relation(fields: [themeId], references: [id])
  formateurId           Int
  formateur             Formateur           @relation(fields: [formateurId], references: [id])
  dateDebut             DateTime
  dateFin               DateTime
  dureeH                Int                 @db.Int
  dureeJ                Int                 @db.Int
  heuresParJour         Int                 @db.Int
  tarif                 Float               @db.Float
  niveau                Niveau?
  ressourcesMaterielles MaterialRessource[]
  ressourcesLogicielles SoftwareRessource[]
  certifiante           String?
  prerequis             Requirement[]
  objectifs             Objectif[]
  lieu                  String              @db.VarChar(60)
  status                String              @db.VarChar(60)
  nbParticipants        Int                 @db.Int
  nbGroupes             Int                 @db.Int
  participants          Participant[]
}

model Niveau {
  id            Int         @id @default(autoincrement())
  designation   String      @db.VarChar(60)
  description   String      @db.VarChar(124)
  formationId   Int         @unique
  formation     Formation   @relation(fields: [formationId], references: [id])
  participantId Int         @unique
  participant   Participant @relation(fields: [participantId], references: [id])
}

model Objectif {
  id          Int       @id @default(autoincrement())
  description String    @db.VarChar(124)
  designation String    @db.VarChar(60)
  formationId Int
  formation   Formation @relation(fields: [formationId], references: [id])
}

model Requirement {
  id          Int       @id @default(autoincrement())
  designation String    @db.VarChar(60)
  formationId Int
  formation   Formation @relation(fields: [formationId], references: [id])
}

model MaterialRessource {
  id          Int       @id @default(autoincrement())
  designation String    @db.VarChar(60)
  formationId Int
  formation   Formation @relation(fields: [formationId], references: [id])
}

model SoftwareRessource {
  id          Int       @id @default(autoincrement())
  designation String    @db.VarChar(60)
  formationId Int
  formation   Formation @relation(fields: [formationId], references: [id])
}
